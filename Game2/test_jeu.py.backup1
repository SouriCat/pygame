import pygame
pygame.init()


win_width = 1000
win_height = 700
win_width_boundary = win_width
win_height_boundary = win_height - 100

win = pygame.display.set_mode((win_width, win_height))
pygame.display.set_caption("Mon premier jeu")
#########   Chargement des images   ###########
tile_hud1 = (pygame.image.load('HUD1.png'), False)
tile_hud2 = (pygame.image.load('HUD2.png'), False)
tile_hud3 = (pygame.image.load('HUD3.png'), False)
tile_hud4 = (pygame.image.load('HUD4.png'), False)
             
tile_grass = (pygame.image.load('tiles-grass.png'), True)
tile_wall = (pygame.image.load('tiles-wall.jpg'), False)
tile_tree1 = (pygame.image.load('tiles-grass_tree1.png'), False)

width_tile = 100
height_tile = 100
walls = []

character = pygame.image.load('standing.png')
#RECT_character = character.get_rect()
#print ( "voici le rectangle du personnage" ,RECT_character)


def get_rect(x, y, width, height):
#    print ("i made a pygame rect with :", x, y, width, height)
    return pygame.Rect(x, y, width, height)

#########    Données du joueur     ##########
class player(object):
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.vel = 12
        self.hitbox = self.x + 16, self.y + 15, 32, 48
    def draw (self, win):
#        self.hitbox = character.get_rect()
        self.hitbox = self.x + 16, self.y + 15, 32, 48
        pygame.draw.rect(win, (255,255,0), self.hitbox,2)
        win.blit(character, (self.x, self.y))
        print ("j'ai afficher le personnage")
    def draw_in_hud(self):
        win.blit(character, (15, 610))
        print ("j'ai afficher le personnage dans l'HUD")

###### Données du terrain #######
        
# 0 = grass // 11 = wall // 12 tree1 // 96 HUD1carré // 97 HUD2 //98 HUD3 //99 HUD4 //
tiles_1 = [[12,12, 0,12,12, 0, 0, 0, 0, 0],
           [ 0, 0, 0, 0,12, 0, 0, 0,12, 0],
           [ 0, 0, 0, 0, 0,12, 0, 0,12, 0],
           [ 0,12,11, 0,11,11,11, 0,12,12],
           [ 0, 0,11, 0, 0, 0,11, 0, 0, 0],
           [ 0, 0,11, 0, 0, 0, 0, 0, 0, 0],
           [96,97,98,98,98,98,98,98,99,96]]



class field(object):
    def fill_matrice(tiles):
        line_increment = 0
        for line in tiles:        
            tile_increment = 0
            for tile in line:
    ##           tiles[line_increment][tile_increment] = tile_increment*100 , line_increment*100  
                x_tile = tile_increment*100
                y_tile = line_increment*100
                
                win.blit(tile_grass[0], (x_tile,y_tile))
                
                tile_increment += 1
            tile_increment = 0       
            line_increment += 1
        pygame.display.update()

    def change_tile(tiles, new_tile, id_tile):
        line_increment = 0
        for line in tiles:        
            tile_increment = 0
            for tile in line:
    ##           tiles[line_increment][tile_increment] = tile_increment*100 , line_increment*100  
                x_tile = tile_increment*100
                y_tile = line_increment*100            
                if tile == id_tile:
                    win.blit(new_tile[0], (x_tile, y_tile))

                tile_increment += 1
            tile_increment = 0       
            line_increment += 1
        pygame.display.update()
             
    def draw_tiles_of_field ():
        # 0 = grass // 11 = wall // 12 = tree1
        field.change_tile(tiles_1, tile_grass, 0)
        field.change_tile(tiles_1, tile_wall, 11)
        field.change_tile(tiles_1, tile_tree1, 12)
        # 96 = HUD square // 97 = HUD left // 98 = HUD mid // 99 = HUD right
        field.change_tile(tiles_1, tile_hud1, 96)
        field.change_tile(tiles_1, tile_hud2, 97)
        field.change_tile(tiles_1, tile_hud3, 98)
        field.change_tile(tiles_1, tile_hud4, 99)


##        print("Ligne",line_increment, line)
class wall(object):
    def __init__(self, pos_x_tile, pos_y_tile):
        walls.append((pos_x_tile, pos_y_tile, 100, 100))

    def find_wall(tiles):
        line_increment = 0
        for line in tiles:
            tile_increment = 0
            for tile in line:
                if tile >= 10:
                    x_tile = tile_increment*100
                    y_tile = line_increment*100
                    wall(x_tile, y_tile)
                    
                tile_increment += 1
            tile_increment = 0
            line_increment += 1
      
    def test_collide_wall():
        to_return = 0
        Rect_player = get_rect(man.hitbox[0], man.hitbox[1], man.hitbox[2], man.hitbox[3])
        for element in walls:
            Rect_Tile =get_rect(element[0], element[1], element[2], element[3])  
            if Rect_Tile.colliderect(Rect_player):
                to_return = 1
                print ("vous touchez un mur !", element[0], element[1])
                break
            else:
                to_return = 0
#        print ("Dans fonction collide_wall", to_return)
        return to_return


## Affichage du fond d'écran


def redraw_game_windows():
    field.draw_tiles_of_field()
    man.draw(win)
#    pygame.draw.rect(win, (255,255,0), rect_for_player_display_update,2)
#    pygame.draw.rect(win, (255,0,0), rect_for_HUD_display_update,2)
    pygame.display.update(rect_for_player_display_update)



## Plus de tiles ici : https://www.deviantart.com/phyromatical/art/Tons-of-Tileset-3-10-Gaia-Trees-486095492 
####### Fin des données du terrain ###########

#######          MAINLOOP          ###########
rect_for_player_display_update = ( 0, 0, 1000, 600)
rect_for_HUD_display_update = ( 0, 600, 1000, 100)

field.fill_matrice(tiles_1)
field.draw_tiles_of_field()
man = player(200, 100, 64,64)
man.draw(win)
man.draw_in_hud()
pygame.display.update(rect_for_HUD_display_update)
wall.find_wall(tiles_1)
# print (walls)

run = True
while run:
    pygame.time.delay(20)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
            

# Movements with keyboard
    keys = pygame.key.get_pressed()
    test_collide = wall.test_collide_wall()

    if test_collide == 1:
        man.x = x_old
        man.y = y_old
    x_old = man.x
    y_old = man.y


    if keys[pygame.K_LEFT]:
        if man.hitbox[0] > 0:
            man.x -= man.vel
            redraw_game_windows()
    
    if keys[pygame.K_RIGHT]:
        if man.hitbox[0] + man.hitbox[2] < win_width_boundary - man.vel:
            man.x += man.vel
            redraw_game_windows()
            
    if keys[pygame.K_UP]:
        if man.hitbox[1] > 0:
            man.y -= man.vel
            redraw_game_windows()

    if keys[pygame.K_DOWN]:
        if man.hitbox[1] + man.hitbox[3] < win_height_boundary -man.vel:
            man.y += man.vel
            redraw_game_windows()
            



  
pygame.quit()
